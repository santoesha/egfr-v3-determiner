#!/usr/bin/env python
# *- coding: utf-8 -*-
# vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79:

"""[License: GNU General Public License v3 (GPLv3)]

    EGFR vIII determiner: counts vIII / non-vIII spliced reads in BAM files
    Copyright (C) 2019  Youri Hoogstrate

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


    You can contact me via the github repository at the following url:
    <https://github.com/yhoogstrate/egfr-v3-determiner>

    You can e-mail me via 'y.hoogstrate' at the following webmail domain:
    gmail dot com
"""


import click


def sam_to_sorted_bam(sam, sorted_bam):
    fhq = open(bam_file, "wb")
    fhq.write(pysam.view('-b', sam))
    fhq.close()

    alignment_handle = ChimericAlignment(bam_file)
    return alignment_handle.convert(fixed_bam, T_TEST_DIR)


def main():
    CLI()


@click.command()
@click.option("--reference-build", "-r", required=True, type=click.Choice(['hg19', 'hg38']), help="Used reference genome (needed for EGFR exon coordinates)")
@click.option('--spliced-reads-only', "-s", is_flag=True, help="If paired end reads with an insert size longer than 801 bases can be expected, wild-type exon-1 to exon-8 covering reads can can be expected. Enabling this flag only uses spliced reads for vIII determination.")
@click.argument('input_bam', type=click.Path(exists=True),nargs=-1)
def CLI(reference_build, spliced_reads_only, input_bam):
    from egfrviiideterminer import egfrviiideterminer

    if reference_build not in egfrviiideterminer.egfr_exons:
        raise Exception("unknown reference build")

    print("sample\twt-reads\tvIII-reads")
    #idx = {}
    for _ in input_bam:
        if not spliced_reads_only:
            stats = egfrviiideterminer.extract_viii_reads(_, egfrviiideterminer.egfr_exons[reference_build])
        else:
            stats = egfrviiideterminer.extract_viii_reads_based_on_sjs(_, egfrviiideterminer.egfr_exons[reference_build])
        print(_ + "\t" + str(stats['wt']) + "\t" + str(stats['vIII']))
    
    return True


if __name__ == '__main__':
    main()


